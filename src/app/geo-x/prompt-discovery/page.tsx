'use client';

import Header from '../../../components/Header';
import { useState } from 'react';

interface DiscoveryQuery {
  id: number;
  query: string;
  intent: 'research' | 'comparison' | 'problem-solution' | 'purchase';
  confidence_score: number;
  ai_recommendation_potential: 'low' | 'medium' | 'high';
  target_audience: string;
  seasonal_relevance: string;
  competitive_advantage: string;
}

interface PromptDiscoveryData {
  total_queries: number;
  generation_timestamp: string;
  product_category: string;
  queries: DiscoveryQuery[];
  summary: {
    intent_distribution: {
      research: number;
      comparison: number;
      problem_solution: number;
      purchase: number;
    };
    top_opportunities: string[];
    market_insights: string;
  };
}

interface FormData {
  email: string;
  productCategory: string;
}

export default function PromptDiscoveryPage() {
  const [formData, setFormData] = useState<FormData>({
    email: '',
    productCategory: ''
  });
  
  const [discoveryData, setDiscoveryData] = useState<PromptDiscoveryData | null>(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [progress, setProgress] = useState(0);
  const [currentStep, setCurrentStep] = useState('');
  const [selectedIntent, setSelectedIntent] = useState<string>('all');
  const [error, setError] = useState<string | null>(null);

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const resetForm = () => {
    setFormData({ email: '', productCategory: '' });
    setDiscoveryData(null);
    setError(null);
    setProgress(0);
    setCurrentStep('');
    setSelectedIntent('all');
  };

  const exportAsMarkdown = () => {
    if (!discoveryData) return;

    const content = `# GEO-X Prompt Discovery Results

**Product Category:** ${discoveryData.product_category}
**Generated:** ${new Date(discoveryData.generation_timestamp).toLocaleDateString()}
**Total Queries:** ${discoveryData.total_queries}

## Summary
${discoveryData.summary.market_insights}

### Intent Distribution
- Research: ${discoveryData.summary.intent_distribution.research}
- Comparison: ${discoveryData.summary.intent_distribution.comparison}
- Problem Solution: ${discoveryData.summary.intent_distribution.problem_solution}
- Purchase: ${discoveryData.summary.intent_distribution.purchase}

## Top 50 AI Search Queries

${discoveryData.queries.map((query, index) => 
  `### ${index + 1}. ${query.query}
- **Intent:** ${query.intent.replace('-', ' ')}
- **Confidence Score:** ${query.confidence_score}%
- **AI Recommendation Potential:** ${query.ai_recommendation_potential}
- **Target Audience:** ${query.target_audience}
- **Competitive Advantage:** ${query.competitive_advantage}
`).join('\n')}

---
*Generated by ElevateAI GEO-X Prompt Discovery Engine*`;

    const blob = new Blob([content], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `geo-x-queries-${discoveryData.product_category.replace(/\s+/g, '-').toLowerCase()}.md`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const exportAsCSV = () => {
    if (!discoveryData) return;

    const headers = ['ID', 'Query', 'Intent', 'Confidence Score', 'AI Recommendation Potential', 'Target Audience', 'Seasonal Relevance', 'Competitive Advantage'];
    
    const csvContent = [
      headers.join(','),
      ...discoveryData.queries.map(query => [
        query.id,
        `"${query.query.replace(/"/g, '""')}"`,
        query.intent,
        query.confidence_score,
        query.ai_recommendation_potential,
        `"${query.target_audience.replace(/"/g, '""')}"`,
        `"${query.seasonal_relevance.replace(/"/g, '""')}"`,
        `"${query.competitive_advantage.replace(/"/g, '""')}"`
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `geo-x-queries-${discoveryData.product_category.replace(/\s+/g, '-').toLowerCase()}.csv`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const generatePrompts = async () => {
    if (!formData.email.trim()) {
      setError('Email is required');
      return;
    }
    
    if (!formData.productCategory.trim()) {
      setError('Product or category is required');
      return;
    }
    
    // Basic email validation
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.email)) {
      setError('Please enter a valid email address');
      return;
    }

    setIsGenerating(true);
    setError(null);
    setProgress(0);
    setCurrentStep('Initializing AI analysis...');

    try {
      // Fire webhook first (don't block on it)
      fetch('/api/webhooks/prompt-discovery', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: formData.email,
          productCategory: formData.productCategory,
          timestamp: new Date().toISOString(),
          source: 'geo-x-prompt-discovery'
        }),
      }).catch(err => console.log('Webhook failed:', err)); // Don't block main flow

      // Simulate progress updates
      const progressInterval = setInterval(() => {
        setProgress(prev => {
          const next = prev + Math.random() * 15;
          if (next >= 90) {
            clearInterval(progressInterval);
            return 90;
          }
          return next;
        });
      }, 500);

      const steps = [
        'Analyzing market trends...',
        'Researching competitor strategies...',
        'Studying AI search patterns...',
        'Generating discovery queries...',
        'Optimizing for brand visibility...',
        'Finalizing recommendations...'
      ];

      let stepIndex = 0;
      const stepInterval = setInterval(() => {
        if (stepIndex < steps.length) {
          setCurrentStep(steps[stepIndex]);
          stepIndex++;
        } else {
          clearInterval(stepInterval);
        }
      }, 2000);

      const response = await fetch('/api/geo-x/prompt-discovery', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      clearInterval(progressInterval);
      clearInterval(stepInterval);

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to generate prompts');
      }

      const result = await response.json();
      
      if (result.success && result.data) {
        setDiscoveryData(result.data);
        setProgress(100);
        setCurrentStep('Discovery complete!');
      } else {
        throw new Error('Invalid response format');
      }

    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unexpected error occurred');
      setCurrentStep('Generation failed');
    } finally {
      setIsGenerating(false);
      setTimeout(() => {
        setProgress(0);
        setCurrentStep('');
      }, 2000);
    }
  };

  const getIntentColor = (intent: string) => {
    switch (intent) {
      case 'research': return 'bg-blue-600/20 text-blue-300 border-blue-500/30';
      case 'comparison': return 'bg-yellow-600/20 text-yellow-300 border-yellow-500/30';
      case 'problem-solution': return 'bg-green-600/20 text-green-300 border-green-500/30';
      case 'purchase': return 'bg-purple-600/20 text-purple-300 border-purple-500/30';
      default: return 'bg-gray-600/20 text-gray-300 border-gray-500/30';
    }
  };

  const getPotentialColor = (potential: string) => {
    switch (potential) {
      case 'high': return 'text-green-400';
      case 'medium': return 'text-yellow-400';
      case 'low': return 'text-red-400';
      default: return 'text-gray-400';
    }
  };

  const filteredQueries = discoveryData?.queries?.filter(query => 
    selectedIntent === 'all' || query.intent === selectedIntent
  ) || [];

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
      <Header />
      
      {/* Hero Section */}
      <div className="relative overflow-hidden">
        <div className="absolute inset-0 bg-gradient-to-r from-purple-800/20 to-blue-800/20"></div>
        <div className="relative max-w-7xl mx-auto px-4 py-16">
          {/* New Query Button - Only show when results exist */}
          {discoveryData && (
            <div className="flex justify-center mb-8">
              <button 
                onClick={resetForm}
                className="bg-gradient-to-r from-green-600 to-emerald-600 text-white px-6 py-3 rounded-xl font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl transform hover:scale-105"
              >
                + New Query
              </button>
            </div>
          )}
          
          <div className="text-center mb-12">
            <div className="flex justify-center mb-6">
              <div className="bg-gradient-to-r from-purple-600 to-blue-600 rounded-full p-3">
                <div className="w-12 h-12 bg-white rounded-full flex items-center justify-center">
                  <span className="text-xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">üîç</span>
                </div>
              </div>
            </div>
            <h1 className="text-4xl md:text-6xl font-bold text-white mb-4 tracking-tight">
              Prompt Discovery Engine
            </h1>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              Generate the 50 most powerful AI queries that drive consumers directly to your brand
            </p>
          </div>
        </div>
      </div>

      {/* Simplified Form */}
      <div className="max-w-4xl mx-auto px-4 py-8">
        <div className="bg-gradient-to-br from-black/40 to-purple-900/20 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/20 mb-8">
          <h2 className="text-2xl font-bold text-white mb-6 text-center">Start Your Discovery</h2>
          <p className="text-gray-300 text-center mb-8">Get 50 real AI queries that drive consumers to your product or category</p>
          
          <div className="max-w-md mx-auto space-y-6">
            <div>
              <label className="block text-white text-sm font-medium mb-2">
                Your Email *
              </label>
              <input 
                type="email" 
                value={formData.email}
                onChange={(e) => handleInputChange('email', e.target.value)}
                placeholder="your.email@company.com"
                className="w-full p-4 rounded-lg bg-black/30 border border-purple-400/30 text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none text-lg"
                required
              />
            </div>
            
            <div>
              <label className="block text-white text-sm font-medium mb-2">
                Product or Category *
              </label>
              <input 
                type="text" 
                value={formData.productCategory}
                onChange={(e) => handleInputChange('productCategory', e.target.value)}
                placeholder="e.g., wireless earbuds, skincare, running shoes, coffee makers"
                className="w-full p-4 rounded-lg bg-black/30 border border-purple-400/30 text-white placeholder-gray-400 focus:border-purple-400 focus:outline-none text-lg"
                required
              />
              <p className="text-gray-400 text-sm mt-2">Works for both specific products and broad categories</p>
            </div>
          </div>
          
          {error && (
            <div className="mt-6 p-4 bg-red-900/30 border border-red-500/50 rounded-lg max-w-md mx-auto">
              <p className="text-red-300 text-center">{error}</p>
            </div>
          )}
          
          <div className="mt-8 text-center">
            <button 
              onClick={generatePrompts}
              disabled={!formData.email || !formData.productCategory || isGenerating}
              className="bg-gradient-to-r from-purple-600 to-blue-600 text-white px-12 py-4 rounded-xl font-semibold text-xl hover:from-purple-700 hover:to-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-2xl hover:shadow-purple-500/25 transform hover:scale-105"
            >
              {isGenerating ? 'Generating Discovery...' : 'Generate 50 AI Queries'}
            </button>
            <p className="text-gray-400 text-sm mt-4">
              Free analysis ‚Ä¢ Results in 30-60 seconds ‚Ä¢ Real consumer queries
            </p>
          </div>
        </div>

        {/* Progress Indicator */}
        {isGenerating && (
          <div className="bg-gradient-to-br from-black/40 to-purple-900/20 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/20 mb-8">
            <div className="flex items-center gap-4 mb-4">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-400"></div>
              <span className="text-white text-lg font-medium">{currentStep}</span>
            </div>
            <div className="w-full bg-gray-700 rounded-full h-3">
              <div 
                className="bg-gradient-to-r from-purple-600 to-blue-600 h-3 rounded-full transition-all duration-300"
                style={{ width: `${progress}%` }}
              />
            </div>
            <p className="text-gray-300 text-sm mt-2">{Math.round(progress)}% complete</p>
          </div>
        )}

        {/* Results Section */}
        {discoveryData && (
          <div className="space-y-8">
            {/* Summary Dashboard */}
            <div className="bg-gradient-to-br from-black/40 to-purple-900/20 backdrop-blur-sm rounded-2xl p-8 border border-purple-500/20">
              <h3 className="text-2xl font-bold text-white mb-6">Discovery Summary</h3>
              
              <div className="grid md:grid-cols-4 gap-6 mb-8">
                <div className="text-center">
                  <div className="text-3xl font-bold text-blue-400">{discoveryData.summary.intent_distribution.research}</div>
                  <div className="text-sm text-gray-300">Research Queries</div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-yellow-400">{discoveryData.summary.intent_distribution.comparison}</div>
                  <div className="text-sm text-gray-300">Comparison Queries</div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-green-400">{discoveryData.summary.intent_distribution.problem_solution}</div>
                  <div className="text-sm text-gray-300">Problem-Solution</div>
                </div>
                <div className="text-center">
                  <div className="text-3xl font-bold text-purple-400">{discoveryData.summary.intent_distribution.purchase}</div>
                  <div className="text-sm text-gray-300">Purchase Queries</div>
                </div>
              </div>
              
              <div className="bg-black/20 rounded-lg p-6 border border-purple-400/20">
                <h4 className="text-lg font-semibold text-white mb-3">Market Insights</h4>
                <p className="text-gray-300">{discoveryData.summary.market_insights}</p>
              </div>
            </div>

            {/* Query Filters */}
            <div className="flex flex-wrap gap-3">
              <button 
                onClick={() => setSelectedIntent('all')}
                className={`px-4 py-2 rounded-lg font-medium transition-all ${
                  selectedIntent === 'all' 
                    ? 'bg-purple-600 text-white' 
                    : 'bg-black/20 text-gray-300 hover:bg-black/40'
                }`}
              >
                All ({discoveryData.total_queries})
              </button>
              {Object.entries(discoveryData.summary.intent_distribution).map(([intent, count]) => (
                <button 
                  key={intent}
                  onClick={() => setSelectedIntent(intent === 'problem_solution' ? 'problem-solution' : intent)}
                  className={`px-4 py-2 rounded-lg font-medium transition-all ${
                    selectedIntent === (intent === 'problem_solution' ? 'problem-solution' : intent)
                      ? getIntentColor(intent === 'problem_solution' ? 'problem-solution' : intent).replace('bg-', 'bg-').replace('/20', '') + ' border-0'
                      : 'bg-black/20 text-gray-300 hover:bg-black/40'
                  }`}
                >
                  {intent.replace('_', '-')} ({count})
                </button>
              ))}
            </div>

            {/* Query Results */}
            <div className="space-y-4">
              {filteredQueries.map((query) => (
                <div key={query.id} className="bg-gradient-to-br from-black/40 to-purple-900/20 backdrop-blur-sm rounded-xl p-6 border border-purple-500/20 hover:border-purple-400/40 transition-all duration-300">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h4 className="text-white font-semibold text-lg mb-2">{query.query}</h4>
                      <p className="text-gray-400 text-sm mb-3">{query.competitive_advantage}</p>
                    </div>
                    <div className="flex items-center gap-3">
                      <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getIntentColor(query.intent)}`}>
                        {query.intent.replace('-', ' ')}
                      </span>
                      <div className="text-right">
                        <div className={`font-bold text-lg ${getPotentialColor(query.ai_recommendation_potential)}`}>
                          {query.confidence_score}%
                        </div>
                        <div className="text-xs text-gray-400">confidence</div>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex flex-wrap gap-4 text-sm text-gray-300">
                    <div>
                      <span className="text-gray-400">Target:</span> {query.target_audience}
                    </div>
                    <div>
                      <span className="text-gray-400">Timing:</span> {query.seasonal_relevance}
                    </div>
                    <div>
                      <span className="text-gray-400">Potential:</span> 
                      <span className={getPotentialColor(query.ai_recommendation_potential)}>
                        {' ' + query.ai_recommendation_potential}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>

            {/* Export Options */}
            <div className="flex flex-col sm:flex-row gap-4 justify-center items-center">
              <button 
                onClick={exportAsMarkdown}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white px-8 py-3 rounded-lg font-semibold hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                üìÑ Export as Markdown
              </button>
              <button 
                onClick={exportAsCSV}
                className="bg-gradient-to-r from-green-600 to-emerald-600 text-white px-8 py-3 rounded-lg font-semibold hover:from-green-700 hover:to-emerald-700 transition-all duration-200 shadow-lg hover:shadow-xl"
              >
                üìä Export as CSV
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}